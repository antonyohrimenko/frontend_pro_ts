import { createContext, useContext, useEffect, useState } from "react";

// —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface IFavoritesContextType {
  // –º–∞—Å—Å–∏–≤ –∏–∑ ID –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  favoriteItems: number[];
  addToFavorites: (id: number) => void;  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
  removeFromFavorites: (id: number) => void; // —É–¥–∞–ª–µ–Ω–∏–µ
  isFavorite: (id: number) => boolean;  // –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã–º
}

// —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º –∏ –¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
export const FavoritesContext = createContext<IFavoritesContextType | undefined>(undefined);

// –æ–±–µ—Ä—Ç–∫–∞ 
export const FavoritesProvider = ({ children }: { children: React.ReactNode; }) => {
  // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const [favoriteItems, setFavoriteItems] = useState<number[]>([]);

  // –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const addToFavorites = (id: number) => {
    if (!isFavorite(id)) {
      setFavoriteItems([...favoriteItems, id]);
    }
  };

  // —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const removeFromFavorites = (id: number) => {
    setFavoriteItems(favoriteItems.filter(itemId => itemId !== id));
  };

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ—Å—Ç—å
  const isFavorite = (id: number) => favoriteItems.includes(id);

  useEffect(() => {
    const storedFavorites = localStorage.getItem("favorites");
    if (storedFavorites) {
      setFavoriteItems(JSON.parse(storedFavorites));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("favorites", JSON.stringify(favoriteItems));
  }, [favoriteItems]);

  return (
    <FavoritesContext.Provider value={{ favoriteItems, addToFavorites, removeFromFavorites, isFavorite }}>
      {children}
    </FavoritesContext.Provider>
  );
};

// –ø–æ—Ä—Ç–∞–ª –¥–ª—è –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export const useFavorites = () => {
  const context = useContext(FavoritesContext);
  if (!context) {
    throw new Error('no such context ü´£');
  }
  return context;
};
