import { useEffect, useState } from "react";
import MyButton from "../../components/myButton/MyButton";
import Lesson05 from "../lesson05/Lesson05";
import styles from './lesson08.module.css';

export default function Lesson08(): JSX.Element {
  const [toggle, setToggle] = useState<boolean>(false);
  const [dogImg, setDogImg] = useState<string>('');
  const [count, setCount] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const handleToggle = (): void => {
    setToggle(prev => !prev);
  };

  const handleCount = (): void => {
    setCount(prev => prev + 1);
  };

  useEffect(() => {
    const fetchDogImage = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('https://dog.ceo/api/breeds/image/random');
        if (!response.ok) {
          throw new Error(`Error is ${response.status}`);
        }
        const data = await response.json();
        setDogImg(data.message);
        setError(null);
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Unknown error occurred");
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchDogImage();
  }, [count]);

  const lifecycleStages = [
    "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - Mounting(–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - Updating(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)",
    "—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ DOM - Unmounting (—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
  ];

  const updatingCases = [
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è",
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–π props",
  ];

  const useEffectDescription = [
    "–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏",
    "–º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ '–ø–æ–¥–ø–∏—Å–∞—Ç—å' useEffect –∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ",
    "–ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ - –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞",
  ];

  return (
    <div>
      <h2>UseEffect() hook ‚ö°Ô∏è</h2>
      <h4>3 —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</h4>
      <ul className={styles.useEffectList}>
        {lifecycleStages.map((stage, index) => (
          <li key={index}>{stage}</li>
        ))}
      </ul>
      <h4>–≠—Ç–∞–ø Updating –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö:</h4>
      <ul className={styles.useEffectList}>
        {updatingCases.map((caseItem, index) => (
          <li key={index}>{caseItem}</li>
        ))}
      </ul>
      <h4>UseEffect —ç—Ç–æ —Ö—É–∫ –≤ React –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≥–∏–±–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. UseEffect –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:</h4>
      <ul className={styles.useEffectList}>
        {useEffectDescription.map((desc, index) => (
          <li key={index}>{desc}</li>
        ))}
      </ul>

      <div className={styles.dogWrapper}>
        {isLoading ? (
          <p>Loading...</p>
        ) : error ? (
          <p>Error: {error}</p>
        ) : (
          <img src={dogImg} alt="dogImg" />
        )}
      </div>

      <MyButton text={`${toggle ? 'hide' : 'show'} fellowship`} func={handleToggle} />
      <MyButton text={`${count} üíú`} func={handleCount} />

      {toggle && <Lesson05 />}
    </div>
  );
}